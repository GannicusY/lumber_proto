// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/Spec/Prop.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lumber.Spec {

  /// <summary>Holder for reflection information generated from proto/Spec/Prop.proto</summary>
  public static partial class PropReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/Spec/Prop.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PropReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm90by9TcGVjL1Byb3AucHJvdG8SC2x1bWJlci5TcGVjItcBCgRQcm9w",
            "Eg8KB1Byb3BfSUQYASABKAUSEQoJUHJvcF9OYW1lGAIgASgJEhEKCVByb3Bf",
            "VHlwZRgDIAEoBRIRCglQcm9wX1JhcmUYBCABKAUSEQoJUHJvcF9EZXNjGAUg",
            "ASgJEg8KB0lzU3RhY2sYBiABKAUSEgoKU3RhY2tMaW1pdBgHIAEoBRISCgpQ",
            "cm9wX1ByaWNlGAggASgFEhMKC0RlYnJpc19Db21wGAkgASgFEhIKCkNvbXBv",
            "c2VfSUQYCiABKAUSEAoIUHJvcF9VcmwYCyABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lumber.Spec.Prop), global::Lumber.Spec.Prop.Parser, new[]{ "PropID", "PropName", "PropType", "PropRare", "PropDesc", "IsStack", "StackLimit", "PropPrice", "DebrisComp", "ComposeID", "PropUrl" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Prop : pb::IMessage<Prop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Prop> _parser = new pb::MessageParser<Prop>(() => new Prop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Prop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lumber.Spec.PropReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Prop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Prop(Prop other) : this() {
      propID_ = other.propID_;
      propName_ = other.propName_;
      propType_ = other.propType_;
      propRare_ = other.propRare_;
      propDesc_ = other.propDesc_;
      isStack_ = other.isStack_;
      stackLimit_ = other.stackLimit_;
      propPrice_ = other.propPrice_;
      debrisComp_ = other.debrisComp_;
      composeID_ = other.composeID_;
      propUrl_ = other.propUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Prop Clone() {
      return new Prop(this);
    }

    /// <summary>Field number for the "Prop_ID" field.</summary>
    public const int PropIDFieldNumber = 1;
    private int propID_;
    /// <summary>
    /// 道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PropID {
      get { return propID_; }
      set {
        propID_ = value;
      }
    }

    /// <summary>Field number for the "Prop_Name" field.</summary>
    public const int PropNameFieldNumber = 2;
    private string propName_ = "";
    /// <summary>
    /// 中文名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PropName {
      get { return propName_; }
      set {
        propName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Prop_Type" field.</summary>
    public const int PropTypeFieldNumber = 3;
    private int propType_;
    /// <summary>
    /// 道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PropType {
      get { return propType_; }
      set {
        propType_ = value;
      }
    }

    /// <summary>Field number for the "Prop_Rare" field.</summary>
    public const int PropRareFieldNumber = 4;
    private int propRare_;
    /// <summary>
    /// 道具品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PropRare {
      get { return propRare_; }
      set {
        propRare_ = value;
      }
    }

    /// <summary>Field number for the "Prop_Desc" field.</summary>
    public const int PropDescFieldNumber = 5;
    private string propDesc_ = "";
    /// <summary>
    /// 道具描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PropDesc {
      get { return propDesc_; }
      set {
        propDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsStack" field.</summary>
    public const int IsStackFieldNumber = 6;
    private int isStack_;
    /// <summary>
    /// 是否可堆叠
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsStack {
      get { return isStack_; }
      set {
        isStack_ = value;
      }
    }

    /// <summary>Field number for the "StackLimit" field.</summary>
    public const int StackLimitFieldNumber = 7;
    private int stackLimit_;
    /// <summary>
    /// 堆叠上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StackLimit {
      get { return stackLimit_; }
      set {
        stackLimit_ = value;
      }
    }

    /// <summary>Field number for the "Prop_Price" field.</summary>
    public const int PropPriceFieldNumber = 8;
    private int propPrice_;
    /// <summary>
    /// 价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PropPrice {
      get { return propPrice_; }
      set {
        propPrice_ = value;
      }
    }

    /// <summary>Field number for the "Debris_Comp" field.</summary>
    public const int DebrisCompFieldNumber = 9;
    private int debrisComp_;
    /// <summary>
    /// 碎片合成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DebrisComp {
      get { return debrisComp_; }
      set {
        debrisComp_ = value;
      }
    }

    /// <summary>Field number for the "Compose_ID" field.</summary>
    public const int ComposeIDFieldNumber = 10;
    private int composeID_;
    /// <summary>
    /// 合成道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ComposeID {
      get { return composeID_; }
      set {
        composeID_ = value;
      }
    }

    /// <summary>Field number for the "Prop_Url" field.</summary>
    public const int PropUrlFieldNumber = 11;
    private string propUrl_ = "";
    /// <summary>
    /// Icon图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PropUrl {
      get { return propUrl_; }
      set {
        propUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Prop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Prop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropID != other.PropID) return false;
      if (PropName != other.PropName) return false;
      if (PropType != other.PropType) return false;
      if (PropRare != other.PropRare) return false;
      if (PropDesc != other.PropDesc) return false;
      if (IsStack != other.IsStack) return false;
      if (StackLimit != other.StackLimit) return false;
      if (PropPrice != other.PropPrice) return false;
      if (DebrisComp != other.DebrisComp) return false;
      if (ComposeID != other.ComposeID) return false;
      if (PropUrl != other.PropUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PropID != 0) hash ^= PropID.GetHashCode();
      if (PropName.Length != 0) hash ^= PropName.GetHashCode();
      if (PropType != 0) hash ^= PropType.GetHashCode();
      if (PropRare != 0) hash ^= PropRare.GetHashCode();
      if (PropDesc.Length != 0) hash ^= PropDesc.GetHashCode();
      if (IsStack != 0) hash ^= IsStack.GetHashCode();
      if (StackLimit != 0) hash ^= StackLimit.GetHashCode();
      if (PropPrice != 0) hash ^= PropPrice.GetHashCode();
      if (DebrisComp != 0) hash ^= DebrisComp.GetHashCode();
      if (ComposeID != 0) hash ^= ComposeID.GetHashCode();
      if (PropUrl.Length != 0) hash ^= PropUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropID);
      }
      if (PropName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PropName);
      }
      if (PropType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PropType);
      }
      if (PropRare != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PropRare);
      }
      if (PropDesc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PropDesc);
      }
      if (IsStack != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IsStack);
      }
      if (StackLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StackLimit);
      }
      if (PropPrice != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PropPrice);
      }
      if (DebrisComp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DebrisComp);
      }
      if (ComposeID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ComposeID);
      }
      if (PropUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PropUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropID);
      }
      if (PropName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PropName);
      }
      if (PropType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PropType);
      }
      if (PropRare != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PropRare);
      }
      if (PropDesc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PropDesc);
      }
      if (IsStack != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IsStack);
      }
      if (StackLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StackLimit);
      }
      if (PropPrice != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PropPrice);
      }
      if (DebrisComp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DebrisComp);
      }
      if (ComposeID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ComposeID);
      }
      if (PropUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PropUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PropID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
      }
      if (PropName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropName);
      }
      if (PropType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropType);
      }
      if (PropRare != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropRare);
      }
      if (PropDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropDesc);
      }
      if (IsStack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsStack);
      }
      if (StackLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackLimit);
      }
      if (PropPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropPrice);
      }
      if (DebrisComp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DebrisComp);
      }
      if (ComposeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComposeID);
      }
      if (PropUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Prop other) {
      if (other == null) {
        return;
      }
      if (other.PropID != 0) {
        PropID = other.PropID;
      }
      if (other.PropName.Length != 0) {
        PropName = other.PropName;
      }
      if (other.PropType != 0) {
        PropType = other.PropType;
      }
      if (other.PropRare != 0) {
        PropRare = other.PropRare;
      }
      if (other.PropDesc.Length != 0) {
        PropDesc = other.PropDesc;
      }
      if (other.IsStack != 0) {
        IsStack = other.IsStack;
      }
      if (other.StackLimit != 0) {
        StackLimit = other.StackLimit;
      }
      if (other.PropPrice != 0) {
        PropPrice = other.PropPrice;
      }
      if (other.DebrisComp != 0) {
        DebrisComp = other.DebrisComp;
      }
      if (other.ComposeID != 0) {
        ComposeID = other.ComposeID;
      }
      if (other.PropUrl.Length != 0) {
        PropUrl = other.PropUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropID = input.ReadInt32();
            break;
          }
          case 18: {
            PropName = input.ReadString();
            break;
          }
          case 24: {
            PropType = input.ReadInt32();
            break;
          }
          case 32: {
            PropRare = input.ReadInt32();
            break;
          }
          case 42: {
            PropDesc = input.ReadString();
            break;
          }
          case 48: {
            IsStack = input.ReadInt32();
            break;
          }
          case 56: {
            StackLimit = input.ReadInt32();
            break;
          }
          case 64: {
            PropPrice = input.ReadInt32();
            break;
          }
          case 72: {
            DebrisComp = input.ReadInt32();
            break;
          }
          case 80: {
            ComposeID = input.ReadInt32();
            break;
          }
          case 90: {
            PropUrl = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropID = input.ReadInt32();
            break;
          }
          case 18: {
            PropName = input.ReadString();
            break;
          }
          case 24: {
            PropType = input.ReadInt32();
            break;
          }
          case 32: {
            PropRare = input.ReadInt32();
            break;
          }
          case 42: {
            PropDesc = input.ReadString();
            break;
          }
          case 48: {
            IsStack = input.ReadInt32();
            break;
          }
          case 56: {
            StackLimit = input.ReadInt32();
            break;
          }
          case 64: {
            PropPrice = input.ReadInt32();
            break;
          }
          case 72: {
            DebrisComp = input.ReadInt32();
            break;
          }
          case 80: {
            ComposeID = input.ReadInt32();
            break;
          }
          case 90: {
            PropUrl = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
